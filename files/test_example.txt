# 泛型定义
T1 = TypeVar("T1")
T2 = TypeVar("T2")
class Exp:
    x : T1
    y : T2
    def init(x : T1, y : T2):
        self.x = x
        self.y = y
    def getList(self) -> List[T1]:
        l : List[T1] = [self.x, self.y]
        return l

# 递归函数
def factorial(n: int) -> int:
    if n == 0 or n == 1:
        return 1
    else:
        return n * factorial(n - 1)
# 字符串参与逻辑运算
def isLetter(c: str) -> bool:
    if c >= "a" and c <= "z":
        return True
    if c >= "A" and c <= "Z":
        return True
    return False

def main() -> int:
    exp: Exp<str, str> = Exp<str, str>("abc", "a")
    l: List[str] = exp.getList()
    print("class getList: <", l[0], ", ", l[1], ">")
    
    fact_result: int = factorial(4)
    print("Factorial:", fact_result)

    c: str = "b"
    print(c, " isLetter = ", isLetter(c))

    return 0
