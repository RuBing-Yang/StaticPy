DEFTK def
IDENFR func1
LPARENT (
RPARENT )
ARROW ->
NONETK None
COLON :
ADDTAB AddTab
IDENFR i
COLON :
INTTK int
ASSIGN =
INTCON 1
PLUS +
INTCON 1
MULT *
INTCON 1
MINU -
INTCON 1
IFTK if
IDENFR i
EQL ==
INTCON 1
COLON :
ADDTAB AddTab
PRINTTK print
LPARENT (
STRCON "i is "
COMMA ,
IDENFR i
RPARENT )
DELTAB DelTab
DELTAB DelTab
DEFTK def
IDENFR func2
LPARENT (
IDENFR l
COLON :
LISTTK List
RPARENT )
ARROW ->
LISTTK List
COLON :
ADDTAB AddTab
IDENFR l
LBRACK [
INTCON 1
RBRACK ]
ASSIGN =
INTCON 5
RETURNTK return
IDENFR l
DELTAB DelTab
DEFTK def
IDENFR main
LPARENT (
RPARENT )
ARROW ->
INTTK int
COLON :
ADDTAB AddTab
IDENFR func1
LPARENT (
RPARENT )
IDENFR l
COLON :
LISTTK List
ASSIGN =
LBRACK [
INTCON 1
COMMA ,
INTCON 2
COMMA ,
INTCON 3
RBRACK ]
IDENFR l2
COLON :
LISTTK List
ASSIGN =
IDENFR func2
LPARENT (
IDENFR l
RPARENT )
IDENFR i
COLON :
INTTK int
ASSIGN =
INTCON 0
WHILETK while
IDENFR i
LSS <
INTCON 3
COLON :
ADDTAB AddTab
PRINTTK print
LPARENT (
STRCON "list ["
COMMA ,
IDENFR i
COMMA ,
STRCON "] = "
COMMA ,
IDENFR l2
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
DELTAB DelTab
IDENFR d
COLON :
DICTTK Dict
ASSIGN =
LBRACE {
INTCON 1
COLON :
INTCON 11
COMMA ,
INTCON 2
COLON :
INTCON 22
RBRACE }
IDENFR i
ASSIGN =
INTCON 1
WHILETK while
IDENFR i
LSS <
INTCON 10
COLON :
ADDTAB AddTab
PRINTTK print
LPARENT (
STRCON "dict ["
COMMA ,
IDENFR i
COMMA ,
STRCON "] = "
COMMA ,
IDENFR d
LBRACK [
IDENFR i
RBRACK ]
RPARENT )
IDENFR i
ASSIGN =
IDENFR i
PLUS +
INTCON 1
IFTK if
IDENFR i
GEQ >=
INTCON 3
COLON :
ADDTAB AddTab
BREAKTK break
DELTAB DelTab
DELTAB DelTab
RETURNTK return
INTCON 0
DELTAB DelTab
